{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../App.svelte",
    "../Robot.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Robot from \"./Robot.svelte\";\n  let robots = [];\n  let name = \"sven\";\n  let money = 200;\n  let energy = 0;\n  let selectedRobot = 0;\n  let upgrades = {\n    maxhp: [10, 25, 50, 75],\n    storage: [10, 25, 50, 75],\n    damage: [1, 10, 25, 50],\n    miningspeed: [1, 5, 10, 15],\n    mininglevel: [\"Coal\", \"Iron\", \"Gem\", \"Platin\"],\n    energycapacity: [10, 20, 40, 60],\n    energyregen: [1, 2, 4, 6],\n    cost: [0, 100, 300, 900]\n  };\n  let prices = {\n    coal: 1,\n    iron: 3,\n    gems: 6,\n    robot: 100\n  };\n  function changeSelectedRobot(id) {\n    console.log(\"id is: \", id);\n    selectedRobot = id;\n    console.log(\"selectedRobot is now: \", id);\n  }\n  function buyRobot() {\n    robots = [\n      ...robots,\n      {\n        name: name,\n        maxhp: { value: upgrades.maxhp[0], tier: 0 },\n        hp: 10,\n        storage: { value: upgrades.storage[0], tier: 0 },\n        damage: { value: upgrades.damage[0], tier: 0 },\n        miningspeed: { value: upgrades.miningspeed[0], tier: 0 },\n        mininglevel: { value: upgrades.mininglevel[0], tier: 0 },\n        energy: 10,\n        energycapacity: { value: upgrades.energycapacity[0], tier: 0 },\n        energyregen: { value: upgrades.energyregen[0], tier: 0 },\n        upgrades: 0,\n        coal: 0,\n        iron: 0,\n        gems: 0\n      }\n    ];\n    prices.robot = Math.floor(100 * Math.pow(1.1, robots.length));\n    prices = prices;\n  }\n  function killRobot() {\n    selectedRobot = 0;\n    robots = [...robots.slice(selectedRobot - 1, selectedRobot)];\n  }\n  function buyHpUpgrade() {\n    if (robots[selectedRobot].maxhp.tier < 3) {\n      robots[selectedRobot].maxhp.tier++;\n      robots[selectedRobot].upgrades++;\n      robots[selectedRobot].maxhp.value =\n        upgrades.maxhp[robots[selectedRobot].maxhp.tier];\n    }\n  }\n  function buyStorageUpgrade() {\n    if (robots[selectedRobot].storage.tier < 3) {\n      robots[selectedRobot].storage.tier++;\n      robots[selectedRobot].upgrades++;\n      robots[selectedRobot].storage.value =\n        upgrades.storage[robots[selectedRobot].storage.tier];\n    }\n  }\n  function buyDamageUpgrade() {\n    if (robots[selectedRobot].damage.tier < 3) {\n      robots[selectedRobot].damage.tier++;\n      robots[selectedRobot].upgrades++;\n      robots[selectedRobot].damage.value =\n        upgrades.damage[robots[selectedRobot].damage.tier];\n    }\n  }\n  function buyMiningSpeedUpgrade() {\n    if (robots[selectedRobot].miningspeed.tier < 3) {\n      robots[selectedRobot].miningspeed.tier++;\n      robots[selectedRobot].upgrades++;\n      robots[selectedRobot].miningspeed.value =\n        upgrades.miningspeed[robots[selectedRobot].miningspeed.tier];\n    }\n  }\n  function buyMiningLevelUpgrade() {\n    if (robots[selectedRobot].mininglevel.tier < 3) {\n      robots[selectedRobot].mininglevel.tier++;\n      robots[selectedRobot].upgrades++;\n      robots[selectedRobot].mininglevel.value =\n        upgrades.mininglevel[robots[selectedRobot].mininglevel.tier];\n    }\n  }\n  function buyEnergyCapacityUpgrade() {\n    if (robots[selectedRobot].energycapacity.tier < 3) {\n      robots[selectedRobot].energycapacity.tier++;\n      robots[selectedRobot].upgrades++;\n      robots[selectedRobot].energycapacity.value =\n        upgrades.energycapacity[robots[selectedRobot].energycapacity.tier];\n    }\n  }\n  function buyEnergyRegenUpgrade() {\n    if (robots[selectedRobot].energyregen.tier < 3) {\n      robots[selectedRobot].energyregen.tier++;\n      robots[selectedRobot].upgrades++;\n      robots[selectedRobot].energyregen.value =\n        upgrades.energyregen[robots[selectedRobot].energyregen.tier];\n    }\n  }\n  function buyResource(type, ammount, id) {\n    return null;\n  }\n  function calculateInventory(robot) {\n    return robot.coal + robot.iron + robot.gems;\n  }\n  function sell() {\n    money +=\n      robots[selectedRobot].coal * prices.coal +\n      robots[selectedRobot].iron * prices.iron +\n      robots[selectedRobot].gems * prices.gems;\n    robots[selectedRobot].coal = 0;\n    robots[selectedRobot].iron = 0;\n    robots[selectedRobot].gems = 0;\n  }\n  //Im deeply sorry, i want to do this properly..\n  function mineCoal() {\n    let inv =\n      robots[selectedRobot].coal +\n      robots[selectedRobot].iron +\n      robots[selectedRobot].gems;\n    if (\n      inv + robots[selectedRobot].miningspeed.value <=\n      robots[selectedRobot].storage.value\n    ) {\n      robots[selectedRobot].coal += robots[selectedRobot].miningspeed.value;\n    } else {\n      let diff =\n        robots[selectedRobot].storage.value -\n        (inv + robots[selectedRobot].miningspeed.value);\n      robots[selectedRobot].coal +=\n        robots[selectedRobot].miningspeed.value + diff;\n    }\n  }\n  function mineIron() {\n    let inv =\n      robots[selectedRobot].coal +\n      robots[selectedRobot].iron +\n      robots[selectedRobot].gems;\n    if (\n      inv + robots[selectedRobot].miningspeed.value <=\n      robots[selectedRobot].storage.value\n    ) {\n      robots[selectedRobot].iron += robots[selectedRobot].miningspeed.value;\n    } else {\n      let diff =\n        robots[selectedRobot].storage.value -\n        (inv + robots[selectedRobot].miningspeed.value);\n      robots[selectedRobot].iron +=\n        robots[selectedRobot].miningspeed.value + diff;\n    }\n  }\n  function mineGems() {\n    let inv =\n      robots[selectedRobot].coal +\n      robots[selectedRobot].iron +\n      robots[selectedRobot].gems;\n    if (\n      inv + robots[selectedRobot].miningspeed.value <=\n      robots[selectedRobot].storage.value\n    ) {\n      robots[selectedRobot].gems += robots[selectedRobot].miningspeed.value;\n    } else {\n      let diff =\n        robots[selectedRobot].storage.value -\n        (inv + robots[selectedRobot].miningspeed.value);\n      robots[selectedRobot].gems +=\n        robots[selectedRobot].miningspeed.value + diff;\n    }\n  }\n  function buy() {\n    money -= document.getElementById(\"cost\").value;\n  }\n  buyRobot();\n  name = \"\";\n  console.log(prices.robot);\n  // When selected and action done no further actions should be possible\n</script>\n\n<style>\n  main {\n    left: 0;\n    top: 0;\n    position: absolute;\n    background: url(\"background.jpg\") no-repeat;\n    font-family: sans-serif;\n    text-align: center;\n    color: white;\n  }\n  .robotinfowrapper {\n    display: flex;\n    flex-direction: row;\n    margin: 2rem;\n  }\n  .upgradewrapper {\n    display: flex;\n    flex-wrap: wrap;\n    -webkit-box-shadow: 5px 5px 23px -1px rgba(0, 0, 0, 0.42);\n    box-shadow: 5px 5px 23px -1px rgba(0, 0, 0, 0.42);\n    margin: 2rem;\n    border-radius: 1rem;\n    justify-content: center;\n  }\n  .upgrade {\n    display: flex;\n    flex-direction: column;\n    margin: 1rem;\n    -webkit-box-shadow: 5px 5px 23px -1px rgba(0, 0, 0, 0.42);\n    box-shadow: 5px 5px 23px -1px rgba(0, 0, 0, 0.42);\n    border-radius: 1rem;\n    padding: 1rem;\n    background: rgba(0, 0, 0, 0.2);\n  }\n  .button {\n    all: unset;\n    margin: 0.5rem;\n    border: solid white;\n    border-width: 0px 4px 0px 4px;\n    padding: 0.5rem;\n    padding-top: 0.7rem;\n    cursor: pointer;\n    text-transform: uppercase;\n  }\n  .button:hover {\n    transition: background 0.2s ease-in-out;\n    background: rgba(0, 0, 0, 0.2);\n  }\n  .upperwrapper {\n    display: flex;\n    flex-direction: row;\n  }\n  .prices {\n    -webkit-box-shadow: 5px 5px 23px -1px rgba(0, 0, 0, 0.42);\n    box-shadow: 5px 5px 23px -1px rgba(0, 0, 0, 0.42);\n    margin: 2rem 2rem 2rem 0rem;\n    padding: 1rem;\n    border-radius: 1rem;\n    background: rgba(0, 0, 0, 0.2);\n  }\n  .input {\n    all: unset;\n    border-bottom: 4px solid white;\n  }\n</style>\n<main>\n<div class='upperwrapper'>\n  <div class='upgradewrapper'>\n    <div class='upgrade'>\n        HP Upgrade: \n        <button class='button' on:click={buyHpUpgrade}>Buy Upgrade Tier {robots[selectedRobot].maxhp.tier + 1}</button>\n    </div>\n    <div class='upgrade'>\n        Storage Upgrade: \n        <button class='button' on:click={buyStorageUpgrade}>Buy Upgrade Tier {robots[selectedRobot].storage.tier + 1}</button>\n    </div>\n    <div class='upgrade'>\n        Damage Upgrade: \n        <button class='button' on:click={buyDamageUpgrade}>Buy Upgrade Tier {robots[selectedRobot].damage.tier + 1}</button>\n    </div>\n    <div class='upgrade'>\n        Mining Speed Upgrade: \n        <button class='button' on:click={buyMiningSpeedUpgrade}>Buy Upgrade Tier {robots[selectedRobot].miningspeed.tier + 1}</button>\n    </div>\n    <div class='upgrade'>\n        Mining Level Upgrade: \n        <button class='button' on:click={buyMiningLevelUpgrade}>Buy Upgrade Tier {robots[selectedRobot].mininglevel.tier + 1}</button>\n    </div>\n    <div class='upgrade'>\n        Energy Capacity Upgrade: \n        <button class='button' on:click={buyEnergyCapacityUpgrade}>Buy Upgrade Tier {robots[selectedRobot].energycapacity.tier + 1}</button>\n    </div>\n    <div class='upgrade'>\n        Energy Regen Upgrade: \n        <button class='button' on:click={buyEnergyRegenUpgrade}>Buy Upgrade Tier {robots[selectedRobot].energyregen.tier + 1}</button>\n    </div>\n    <div class='upgrade'>\n      <input placeholder=\"Robot Name\" class='input' type=\"name\" bind:value={name}>\n      <button class='button' on:click={buyRobot}>Buy Robot</button>\n    </div>\n    <div class='upgrade'>\n      Sell Your Inventory \n      <button class='button' on:click={sell}>Sell inventory</button>\n    </div>\n    <div class='upgrade'>\n      Mine {robots[selectedRobot].miningspeed.value} Coal\n      <button class='button' on:click={mineCoal}>Mine</button>\n    </div>\n    <div class='upgrade'>\n      Mine {robots[selectedRobot].miningspeed.value} Iron\n      <button class='button' on:click={mineIron}>Mine</button>\n    </div>\n    <div class='upgrade'>\n      Mine {robots[selectedRobot].miningspeed.value} Gems\n      <button class='button' on:click={mineGems}>Mine</button>\n    </div>\n    <div class='upgrade'>\n      <input placeholder=\"Cost\" class='input' type=\"number\" id='cost'>\n      <button class='button' on:click={buy}>Pay price</button>\n    </div>\n  </div>\n  <div class='prices'>\n    {#each Array(3) as _, i}\n      <p>Upgrades of Tier {i +1} cost {Math.floor(upgrades.cost[i+1] * Math.pow(1.1, robots[selectedRobot].upgrades))}</p>\n    {/each}\n    <p>A Robot costs {prices.robot}</p>\n    <p>Your current inventory sells for {(robots[selectedRobot].coal * prices.coal) + (robots[selectedRobot].iron * prices.iron) + (robots[selectedRobot].gems * prices.gems)} \n    <p>Money: {money}</p>\n  </div>\n</div>\n  <div class='robotinfowrapper'>\n    {#each robots as robot, id}\n    <div class='robotwrapper' on:click={() => changeSelectedRobot(id)}>\n      <Robot robot={robot} id={id} selected={selectedRobot === id ? true : false}/>\n    </div>\n\n    {/each}\n  </div>\n  \n  <div>\n    \n    \n    \n    </div>\n</main>",
    "<script>\n  export let robot;\n  export let id;\n  export let selected;\n  selected;\n</script>\n\n<div class='robotinfo' class:selected=\"{selected === true}\">\n  <p>ID {id}: {robot.name}</p>\n  <p>HP: {robot.hp}/{robot.maxhp.value}</p>\n  <p>Storage: {robot.coal + robot.iron + robot.gems}/{robot.storage.value}</p>\n  <p>Damage: {robot.damage.value}</p>\n  <p>Mining up to {robot.mininglevel.value} at {robot.miningspeed.value}/round\n  <p>Energy: {robot.energy}/{robot.energycapacity.value}</p>\n  <p>Regenerates {robot.energyregen.value} per action</p>\n  <p>Upgrades: {robot.upgrades}</p>\n</div>\n\n<style lang=\"scss\">\n  .robotinfo {\n    transition: background 0.2s ease-in-out;\n    border-radius: 1rem;\n    background: rgba(0, 0, 0, 0);\n    margin: 1rem;\n    padding: 0.5rem;\n    -webkit-box-shadow: 5px 5px 23px -1px rgba(0, 0, 0, 0.42);\n    box-shadow: 5px 5px 23px -1px rgba(0, 0, 0, 0.42);\n  }\n  .robotinfo:hover {\n    transition: background 0.2s ease-in-out;\n    background: rgba(0, 0, 0, 0.2);\n  }\n  .selected {\n    background: rgba(0, 0, 0, 0.2);\n  }\n</style>"
  ],
  "names": [],
  "mappings": "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"
}